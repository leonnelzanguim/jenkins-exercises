pipeline {
    agent any
    tools {
        nodejs "my-nodejs"
    }
    stages {
        stage("install dependencies"){
            steps {
                dir('app') {
                    sh 'npm install'
                }
            }
        }
        stage('increment version'){
            steps{
                script {
                     echo 'Increment app version....'
                dir('app') {
                      // increment the minor version (ex: 1.0.0 -> 1.1.0)
                    sh 'npm version minor --no-git-tag-version'

                // read the new version 
                    def version = sh(script: "node -p \"require('./package.json').version\"", returnStdout: true).trim()

                    env.IMAGE_NAME = "${version}-${BUILD_NUMBER}"

                    echo "âœ… new app version: ${env.IMAGE_NAME}"
                }

                }
               
                
            }
        }
        stage('run tests') {
            steps {
                dir('app'){
                    sh 'npm test || echo " tests not found..."'
                }
            }
        }
        
        stage('Build and push Docker image') {
            steps {
                echo 'pushing docker image to docker hub...'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                    sh "docker build -t 10012975/nodejs-app-image:$IMAGE_NAME ./app"
                    sh 'echo $PASS | docker login -u $USER --password-stdin'
                    sh "docker push 10012975/nodejs-app-image:$IMAGE_NAME"
                }
  
            }
            
        }

        stage('commit version to Github') {
            steps {
                script {
                    echo 'commit version to github...'
                    script {
                    withCredentials([usernamePassword(
                        credentialsId: 'github-credentials-push',
                        usernameVariable: 'USER',
                        passwordVariable: 'PASS'
                    )]) {

                        sh 'git config --global user.email "jenkins@example.com"'
            sh 'git config --global user.name "jenkins"'

            sh 'git remote -v'
            sh 'git status'
            sh 'git branch'
            sh 'git config --list'
            
            sh "git remote set-url origin https://${USER}:${PASS}@github.com/leonnelzanguim/jenkins-exercises.git"
            sh 'git add .'
            sh 'git commit -m "ci: version bump"'
            sh 'git push origin HEAD:main'

                    }

                }
            }
        }
    }
    }
}